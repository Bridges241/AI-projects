{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Financial Planning System\n\n## Overview\n\nThis is a full-stack personal financial management application built with React, Express, and PostgreSQL. The system enables users to track income, expenses, and budgets through an intuitive dashboard interface. It features a modern UI built with shadcn/ui components and provides comprehensive financial analytics including loan assessment capabilities. The application is designed as a single-page application with a RESTful API backend and supports real-time data visualization through charts and graphs.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: shadcn/ui components built on top of Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation schemas\n- **Charts**: Recharts for data visualization components\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with JSON responses\n- **Database ORM**: Drizzle ORM with type-safe database operations\n- **Validation**: Zod schemas shared between frontend and backend\n- **Error Handling**: Centralized error middleware with structured error responses\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL using Neon serverless database\n- **Connection Pooling**: @neondatabase/serverless with WebSocket support\n- **Schema Management**: Drizzle Kit for migrations and schema synchronization\n- **Data Models**: Strongly typed entities for users, income records, expense records, and budgets\n\n### Database Schema Design\n- **Users Table**: Basic user authentication structure\n- **Income Records**: Categorized income tracking with types (salary, investment, business)\n- **Expense Records**: Detailed expense tracking with categories and descriptions\n- **Budgets**: Budget management with period-based allocation\n- **Relationships**: Foreign key relationships linking all financial data to users\n\n### Authentication & Authorization\n- **Demo Mode**: Currently uses a hardcoded demo user ID for development\n- **Session Management**: Prepared for session-based authentication with connect-pg-simple\n- **Security**: Input validation through Zod schemas and parameterized queries\n\n### Development & Build Pipeline\n- **Development Server**: Vite dev server with HMR and Express API proxy\n- **Production Build**: Static asset compilation with server-side bundling via esbuild\n- **Environment Configuration**: Environment-based configuration for database connections\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database with connection pooling\n- **Drizzle ORM**: Type-safe database operations and schema management\n\n### Frontend Libraries\n- **Radix UI**: Headless UI component primitives for accessibility\n- **TanStack Query**: Server state management and caching\n- **Recharts**: React charting library for financial data visualization\n- **React Hook Form**: Form state management with performance optimization\n- **Wouter**: Minimalist routing for single-page applications\n\n### Development Tools\n- **Vite**: Fast development server and build tool\n- **TypeScript**: Static type checking and enhanced developer experience\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Zod**: Runtime type validation and schema definition\n\n### Build & Deployment\n- **esbuild**: Fast JavaScript bundler for production server builds\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer\n- **ESLint**: Code linting and formatting (configured for TypeScript/React)","size_bytes":4007},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n        neutral: \"var(--neutral)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2860},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertIncomeRecordSchema, \n  insertExpenseRecordSchema, \n  insertBudgetSchema,\n  insertEntrepreneurshipProjectSchema,\n  insertProjectFinancialRecordSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const DEMO_USER_ID = \"demo-user-id\";\n\n  // Income routes\n  app.get(\"/api/income\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const records = await storage.getIncomeRecords(\n        DEMO_USER_ID,\n        startDate as string,\n        endDate as string\n      );\n      res.json(records);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch income records\" });\n    }\n  });\n\n  app.post(\"/api/income\", async (req, res) => {\n    try {\n      const data = insertIncomeRecordSchema.parse(req.body);\n      const record = await storage.createIncomeRecord(DEMO_USER_ID, data);\n      res.json(record);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid income record data\" });\n    }\n  });\n\n  app.put(\"/api/income/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = insertIncomeRecordSchema.partial().parse(req.body);\n      const record = await storage.updateIncomeRecord(id, DEMO_USER_ID, data);\n      if (!record) {\n        return res.status(404).json({ error: \"Income record not found\" });\n      }\n      res.json(record);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid income record data\" });\n    }\n  });\n\n  app.delete(\"/api/income/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteIncomeRecord(id, DEMO_USER_ID);\n      if (!success) {\n        return res.status(404).json({ error: \"Income record not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete income record\" });\n    }\n  });\n\n  // Expense routes\n  app.get(\"/api/expenses\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const records = await storage.getExpenseRecords(\n        DEMO_USER_ID,\n        startDate as string,\n        endDate as string\n      );\n      res.json(records);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch expense records\" });\n    }\n  });\n\n  app.post(\"/api/expenses\", async (req, res) => {\n    try {\n      const data = insertExpenseRecordSchema.parse(req.body);\n      const record = await storage.createExpenseRecord(DEMO_USER_ID, data);\n      res.json(record);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid expense record data\" });\n    }\n  });\n\n  app.put(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = insertExpenseRecordSchema.partial().parse(req.body);\n      const record = await storage.updateExpenseRecord(id, DEMO_USER_ID, data);\n      if (!record) {\n        return res.status(404).json({ error: \"Expense record not found\" });\n      }\n      res.json(record);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid expense record data\" });\n    }\n  });\n\n  app.delete(\"/api/expenses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteExpenseRecord(id, DEMO_USER_ID);\n      if (!success) {\n        return res.status(404).json({ error: \"Expense record not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete expense record\" });\n    }\n  });\n\n  // Budget routes\n  app.get(\"/api/budgets\", async (req, res) => {\n    try {\n      const budgets = await storage.getBudgets(DEMO_USER_ID);\n      res.json(budgets);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch budgets\" });\n    }\n  });\n\n  app.post(\"/api/budgets\", async (req, res) => {\n    try {\n      const data = insertBudgetSchema.parse(req.body);\n      const budget = await storage.createBudget(DEMO_USER_ID, data);\n      res.json(budget);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid budget data\" });\n    }\n  });\n\n  app.put(\"/api/budgets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = insertBudgetSchema.partial().parse(req.body);\n      const budget = await storage.updateBudget(id, DEMO_USER_ID, data);\n      if (!budget) {\n        return res.status(404).json({ error: \"Budget not found\" });\n      }\n      res.json(budget);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid budget data\" });\n    }\n  });\n\n  app.delete(\"/api/budgets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteBudget(id, DEMO_USER_ID);\n      if (!success) {\n        return res.status(404).json({ error: \"Budget not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete budget\" });\n    }\n  });\n\n  // Financial analysis routes\n  app.get(\"/api/analysis/summary\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const [incomeRecords, expenseRecords] = await Promise.all([\n        storage.getIncomeRecords(DEMO_USER_ID, startDate as string, endDate as string),\n        storage.getExpenseRecords(DEMO_USER_ID, startDate as string, endDate as string)\n      ]);\n\n      const totalIncome = incomeRecords.reduce((sum, record) => sum + parseFloat(record.amount), 0);\n      const totalExpenses = expenseRecords.reduce((sum, record) => sum + parseFloat(record.amount), 0);\n      const netIncome = totalIncome - totalExpenses;\n      const savingsRate = totalIncome > 0 ? (netIncome / totalIncome) * 100 : 0;\n\n      res.json({\n        totalIncome,\n        totalExpenses,\n        netIncome,\n        savingsRate\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to calculate financial summary\" });\n    }\n  });\n\n  // Entrepreneurship Project routes\n  app.get(\"/api/entrepreneurship/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getEntrepreneurshipProjects(DEMO_USER_ID);\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch entrepreneurship projects\" });\n    }\n  });\n\n  app.post(\"/api/entrepreneurship/projects\", async (req, res) => {\n    try {\n      const data = insertEntrepreneurshipProjectSchema.parse(req.body);\n      const project = await storage.createEntrepreneurshipProject(DEMO_USER_ID, data);\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid project data\" });\n    }\n  });\n\n  app.put(\"/api/entrepreneurship/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = insertEntrepreneurshipProjectSchema.partial().parse(req.body);\n      const project = await storage.updateEntrepreneurshipProject(id, DEMO_USER_ID, data);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid project data\" });\n    }\n  });\n\n  app.delete(\"/api/entrepreneurship/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteEntrepreneurshipProject(id, DEMO_USER_ID);\n      if (!success) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete project\" });\n    }\n  });\n\n  // Project Financial Record routes\n  app.get(\"/api/entrepreneurship/projects/:projectId/records\", async (req, res) => {\n    try {\n      const { projectId } = req.params;\n      const { startDate, endDate } = req.query;\n      const records = await storage.getProjectFinancialRecords(\n        projectId,\n        startDate as string,\n        endDate as string\n      );\n      res.json(records);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch project financial records\" });\n    }\n  });\n\n  app.post(\"/api/entrepreneurship/projects/:projectId/records\", async (req, res) => {\n    try {\n      const { projectId } = req.params;\n      const data = insertProjectFinancialRecordSchema.parse({\n        ...req.body,\n        projectId\n      });\n      const record = await storage.createProjectFinancialRecord(data);\n      res.json(record);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid financial record data\" });\n    }\n  });\n\n  app.put(\"/api/entrepreneurship/records/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const data = insertProjectFinancialRecordSchema.partial().parse(req.body);\n      const record = await storage.updateProjectFinancialRecord(id, data);\n      if (!record) {\n        return res.status(404).json({ error: \"Financial record not found\" });\n      }\n      res.json(record);\n    } catch (error) {\n      res.status(400).json({ error: \"Invalid financial record data\" });\n    }\n  });\n\n  app.delete(\"/api/entrepreneurship/records/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteProjectFinancialRecord(id);\n      if (!success) {\n        return res.status(404).json({ error: \"Financial record not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete financial record\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9673},"server/storage.ts":{"content":"import { \n  users, \n  incomeRecords, \n  expenseRecords, \n  budgets,\n  entrepreneurshipProjects,\n  projectFinancialRecords,\n  type User, \n  type InsertUser,\n  type IncomeRecord,\n  type InsertIncomeRecord,\n  type ExpenseRecord,\n  type InsertExpenseRecord,\n  type Budget,\n  type InsertBudget,\n  type EntrepreneurshipProject,\n  type InsertEntrepreneurshipProject,\n  type ProjectFinancialRecord,\n  type InsertProjectFinancialRecord\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Income operations\n  getIncomeRecords(userId: string, startDate?: string, endDate?: string): Promise<IncomeRecord[]>;\n  createIncomeRecord(userId: string, record: InsertIncomeRecord): Promise<IncomeRecord>;\n  updateIncomeRecord(id: string, userId: string, record: Partial<InsertIncomeRecord>): Promise<IncomeRecord | undefined>;\n  deleteIncomeRecord(id: string, userId: string): Promise<boolean>;\n  \n  // Expense operations\n  getExpenseRecords(userId: string, startDate?: string, endDate?: string): Promise<ExpenseRecord[]>;\n  createExpenseRecord(userId: string, record: InsertExpenseRecord): Promise<ExpenseRecord>;\n  updateExpenseRecord(id: string, userId: string, record: Partial<InsertExpenseRecord>): Promise<ExpenseRecord | undefined>;\n  deleteExpenseRecord(id: string, userId: string): Promise<boolean>;\n  \n  // Budget operations\n  getBudgets(userId: string): Promise<Budget[]>;\n  createBudget(userId: string, budget: InsertBudget): Promise<Budget>;\n  updateBudget(id: string, userId: string, budget: Partial<InsertBudget>): Promise<Budget | undefined>;\n  deleteBudget(id: string, userId: string): Promise<boolean>;\n  \n  // Entrepreneurship Project operations\n  getEntrepreneurshipProjects(userId: string): Promise<EntrepreneurshipProject[]>;\n  createEntrepreneurshipProject(userId: string, project: InsertEntrepreneurshipProject): Promise<EntrepreneurshipProject>;\n  updateEntrepreneurshipProject(id: string, userId: string, project: Partial<InsertEntrepreneurshipProject>): Promise<EntrepreneurshipProject | undefined>;\n  deleteEntrepreneurshipProject(id: string, userId: string): Promise<boolean>;\n  \n  // Project Financial Record operations\n  getProjectFinancialRecords(projectId: string, startDate?: string, endDate?: string): Promise<ProjectFinancialRecord[]>;\n  createProjectFinancialRecord(record: InsertProjectFinancialRecord): Promise<ProjectFinancialRecord>;\n  updateProjectFinancialRecord(id: string, record: Partial<InsertProjectFinancialRecord>): Promise<ProjectFinancialRecord | undefined>;\n  deleteProjectFinancialRecord(id: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getIncomeRecords(userId: string, startDate?: string, endDate?: string): Promise<IncomeRecord[]> {\n    if (startDate && endDate) {\n      return db.select().from(incomeRecords).where(\n        and(\n          eq(incomeRecords.userId, userId),\n          gte(incomeRecords.date, startDate),\n          lte(incomeRecords.date, endDate)\n        )\n      ).orderBy(desc(incomeRecords.date));\n    }\n    \n    return db.select().from(incomeRecords).where(eq(incomeRecords.userId, userId)).orderBy(desc(incomeRecords.date));\n  }\n\n  async createIncomeRecord(userId: string, record: InsertIncomeRecord): Promise<IncomeRecord> {\n    const [created] = await db\n      .insert(incomeRecords)\n      .values({ ...record, userId })\n      .returning();\n    return created;\n  }\n\n  async updateIncomeRecord(id: string, userId: string, record: Partial<InsertIncomeRecord>): Promise<IncomeRecord | undefined> {\n    const [updated] = await db\n      .update(incomeRecords)\n      .set(record)\n      .where(and(eq(incomeRecords.id, id), eq(incomeRecords.userId, userId)))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteIncomeRecord(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(incomeRecords)\n      .where(and(eq(incomeRecords.id, id), eq(incomeRecords.userId, userId)));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async getExpenseRecords(userId: string, startDate?: string, endDate?: string): Promise<ExpenseRecord[]> {\n    if (startDate && endDate) {\n      return db.select().from(expenseRecords).where(\n        and(\n          eq(expenseRecords.userId, userId),\n          gte(expenseRecords.date, startDate),\n          lte(expenseRecords.date, endDate)\n        )\n      ).orderBy(desc(expenseRecords.date));\n    }\n    \n    return db.select().from(expenseRecords).where(eq(expenseRecords.userId, userId)).orderBy(desc(expenseRecords.date));\n  }\n\n  async createExpenseRecord(userId: string, record: InsertExpenseRecord): Promise<ExpenseRecord> {\n    const [created] = await db\n      .insert(expenseRecords)\n      .values({ ...record, userId })\n      .returning();\n    return created;\n  }\n\n  async updateExpenseRecord(id: string, userId: string, record: Partial<InsertExpenseRecord>): Promise<ExpenseRecord | undefined> {\n    const [updated] = await db\n      .update(expenseRecords)\n      .set(record)\n      .where(and(eq(expenseRecords.id, id), eq(expenseRecords.userId, userId)))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteExpenseRecord(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(expenseRecords)\n      .where(and(eq(expenseRecords.id, id), eq(expenseRecords.userId, userId)));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async getBudgets(userId: string): Promise<Budget[]> {\n    return db.select().from(budgets).where(eq(budgets.userId, userId));\n  }\n\n  async createBudget(userId: string, budget: InsertBudget): Promise<Budget> {\n    const [created] = await db\n      .insert(budgets)\n      .values({ ...budget, userId })\n      .returning();\n    return created;\n  }\n\n  async updateBudget(id: string, userId: string, budget: Partial<InsertBudget>): Promise<Budget | undefined> {\n    const [updated] = await db\n      .update(budgets)\n      .set(budget)\n      .where(and(eq(budgets.id, id), eq(budgets.userId, userId)))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteBudget(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(budgets)\n      .where(and(eq(budgets.id, id), eq(budgets.userId, userId)));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Entrepreneurship Project operations\n  async getEntrepreneurshipProjects(userId: string): Promise<EntrepreneurshipProject[]> {\n    return db.select().from(entrepreneurshipProjects).where(eq(entrepreneurshipProjects.userId, userId));\n  }\n\n  async createEntrepreneurshipProject(userId: string, project: InsertEntrepreneurshipProject): Promise<EntrepreneurshipProject> {\n    const [created] = await db\n      .insert(entrepreneurshipProjects)\n      .values({ ...project, userId })\n      .returning();\n    return created;\n  }\n\n  async updateEntrepreneurshipProject(id: string, userId: string, project: Partial<InsertEntrepreneurshipProject>): Promise<EntrepreneurshipProject | undefined> {\n    const [updated] = await db\n      .update(entrepreneurshipProjects)\n      .set(project)\n      .where(and(eq(entrepreneurshipProjects.id, id), eq(entrepreneurshipProjects.userId, userId)))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteEntrepreneurshipProject(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(entrepreneurshipProjects)\n      .where(and(eq(entrepreneurshipProjects.id, id), eq(entrepreneurshipProjects.userId, userId)));\n    return (result.rowCount || 0) > 0;\n  }\n\n  // Project Financial Record operations\n  async getProjectFinancialRecords(projectId: string, startDate?: string, endDate?: string): Promise<ProjectFinancialRecord[]> {\n    if (startDate && endDate) {\n      return db.select().from(projectFinancialRecords).where(\n        and(\n          eq(projectFinancialRecords.projectId, projectId),\n          gte(projectFinancialRecords.date, startDate),\n          lte(projectFinancialRecords.date, endDate)\n        )\n      ).orderBy(desc(projectFinancialRecords.date));\n    }\n    \n    return db.select().from(projectFinancialRecords).where(eq(projectFinancialRecords.projectId, projectId)).orderBy(desc(projectFinancialRecords.date));\n  }\n\n  async createProjectFinancialRecord(record: InsertProjectFinancialRecord): Promise<ProjectFinancialRecord> {\n    const [created] = await db\n      .insert(projectFinancialRecords)\n      .values(record)\n      .returning();\n    return created;\n  }\n\n  async updateProjectFinancialRecord(id: string, record: Partial<InsertProjectFinancialRecord>): Promise<ProjectFinancialRecord | undefined> {\n    const [updated] = await db\n      .update(projectFinancialRecords)\n      .set(record)\n      .where(eq(projectFinancialRecords.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteProjectFinancialRecord(id: string): Promise<boolean> {\n    const result = await db\n      .delete(projectFinancialRecords)\n      .where(eq(projectFinancialRecords.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9809},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, date, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// 創業專案表\nexport const entrepreneurshipProjects = pgTable(\"entrepreneurship_projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  startDate: date(\"start_date\").notNull(),\n  status: text(\"status\").notNull().default(\"active\"), // \"active\", \"completed\", \"paused\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// 創業專案財務記錄表 (會計損益表格式)\nexport const projectFinancialRecords = pgTable(\"project_financial_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull(),\n  type: text(\"type\").notNull(), // \"revenue\", \"expense\"\n  category: text(\"category\").notNull(), // 會計科目\n  subCategory: text(\"sub_category\"), // 明細科目\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  date: date(\"date\").notNull(),\n  isPlanned: boolean(\"is_planned\").notNull().default(false), // 計畫 vs 現實\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const incomeRecords = pgTable(\"income_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  type: text(\"type\").notNull(), // \"salary\", \"investment\", \"business\"\n  category: text(\"category\").notNull(), // specific income category\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  notes: text(\"notes\"),\n  isPlanned: boolean(\"is_planned\").notNull().default(false), // 計畫 vs 現實\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const expenseRecords = pgTable(\"expense_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  category: text(\"category\").notNull(), // \"living\", \"loan\", \"insurance\", \"investment\", \"entertainment\", \"other\"\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  date: date(\"date\").notNull(),\n  description: text(\"description\"),\n  notes: text(\"notes\"),\n  isPlanned: boolean(\"is_planned\").notNull().default(false), // 計畫 vs 現實\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const budgets = pgTable(\"budgets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  category: text(\"category\").notNull(),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  period: text(\"period\").notNull().default(\"monthly\"), // \"monthly\", \"yearly\"\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const entrepreneurshipProjectsRelations = relations(entrepreneurshipProjects, ({ one, many }) => ({\n  user: one(users, {\n    fields: [entrepreneurshipProjects.userId],\n    references: [users.id],\n  }),\n  financialRecords: many(projectFinancialRecords),\n}));\n\nexport const projectFinancialRecordsRelations = relations(projectFinancialRecords, ({ one }) => ({\n  project: one(entrepreneurshipProjects, {\n    fields: [projectFinancialRecords.projectId],\n    references: [entrepreneurshipProjects.id],\n  }),\n}));\n\nexport const incomeRecordsRelations = relations(incomeRecords, ({ one }) => ({\n  user: one(users, {\n    fields: [incomeRecords.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const expenseRecordsRelations = relations(expenseRecords, ({ one }) => ({\n  user: one(users, {\n    fields: [expenseRecords.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const budgetsRelations = relations(budgets, ({ one }) => ({\n  user: one(users, {\n    fields: [budgets.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertEntrepreneurshipProjectSchema = createInsertSchema(entrepreneurshipProjects).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertProjectFinancialRecordSchema = createInsertSchema(projectFinancialRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertIncomeRecordSchema = createInsertSchema(incomeRecords).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertExpenseRecordSchema = createInsertSchema(expenseRecords).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertBudgetSchema = createInsertSchema(budgets).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertEntrepreneurshipProject = z.infer<typeof insertEntrepreneurshipProjectSchema>;\nexport type EntrepreneurshipProject = typeof entrepreneurshipProjects.$inferSelect;\nexport type InsertProjectFinancialRecord = z.infer<typeof insertProjectFinancialRecordSchema>;\nexport type ProjectFinancialRecord = typeof projectFinancialRecords.$inferSelect;\nexport type InsertIncomeRecord = z.infer<typeof insertIncomeRecordSchema>;\nexport type IncomeRecord = typeof incomeRecords.$inferSelect;\nexport type InsertExpenseRecord = z.infer<typeof insertExpenseRecordSchema>;\nexport type ExpenseRecord = typeof expenseRecords.$inferSelect;\nexport type InsertBudget = z.infer<typeof insertBudgetSchema>;\nexport type Budget = typeof budgets.$inferSelect;\n","size_bytes":5850},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport IncomePage from \"@/pages/income\";\nimport ExpensesPage from \"@/pages/expenses\";\nimport AnalysisPage from \"@/pages/analysis\";\nimport LoanPage from \"@/pages/loan\";\nimport EntrepreneurshipPage from \"@/pages/entrepreneurship\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/income\" component={IncomePage} />\n      <Route path=\"/expenses\" component={ExpensesPage} />\n      <Route path=\"/analysis\" component={AnalysisPage} />\n      <Route path=\"/loan\" component={LoanPage} />\n      <Route path=\"/entrepreneurship\" component={EntrepreneurshipPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1237},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 98%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(218, 82%, 37%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 20%, 95%);\n  --muted-foreground: hsl(210, 25%, 45%);\n  --accent: hsl(210, 40%, 95%);\n  --accent-foreground: hsl(210, 25%, 7.8431%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 20%, 90%);\n  --input: hsl(210, 20%, 97%);\n  --ring: hsl(218, 82%, 37%);\n  --chart-1: hsl(218, 82%, 37%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(218, 82%, 37%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 95%);\n  --sidebar-accent-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-border: hsl(210, 20%, 90%);\n  --sidebar-ring: hsl(218, 82%, 37%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --success: hsl(160, 84%, 39%);\n  --warning: hsl(0, 85%, 60%);\n  --neutral: hsl(210, 13%, 50%);\n}\n\n.dark {\n  --background: hsl(222, 9%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 10%, 8%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 10%, 8%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(217, 19%, 20%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(215, 14%, 12%);\n  --muted-foreground: hsl(218, 11%, 65%);\n  --accent: hsl(217, 19%, 20%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(218, 13%, 15%);\n  --input: hsl(218, 13%, 15%);\n  --ring: hsl(217, 91%, 60%);\n  --chart-1: hsl(217, 91%, 60%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(222, 10%, 8%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(217, 19%, 20%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(218, 13%, 15%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n  --success: hsl(160, 84%, 39%);\n  --warning: hsl(0, 85%, 60%);\n  --neutral: hsl(210, 13%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .text-primary {\n    color: var(--primary);\n  }\n  \n  .text-success {\n    color: var(--success);\n  }\n  \n  .text-warning {\n    color: var(--warning);\n  }\n  \n  .text-neutral {\n    color: var(--neutral);\n  }\n  \n  .bg-primary {\n    background-color: var(--primary);\n  }\n  \n  .bg-success {\n    background-color: var(--success);\n  }\n  \n  .bg-warning {\n    background-color: var(--warning);\n  }\n  \n  .border-primary {\n    border-color: var(--primary);\n  }\n  \n  .hover\\:bg-blue-700:hover {\n    background-color: hsl(218, 89%, 32%);\n  }\n  \n  .hover\\:bg-red-600:hover {\n    background-color: hsl(0, 85%, 55%);\n  }\n}\n","size_bytes":3697},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analysis.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { IncomeRecord, ExpenseRecord } from \"@shared/schema\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, PieChart, Pie, Cell, Legend, BarChart, Bar } from \"recharts\";\n\nexport default function AnalysisPage() {\n  const { data: incomeRecords = [] } = useQuery<IncomeRecord[]>({\n    queryKey: [\"/api/income\"],\n  });\n\n  const { data: expenseRecords = [] } = useQuery<ExpenseRecord[]>({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  interface SummaryData {\n    totalIncome: number;\n    totalExpenses: number;\n    netIncome: number;\n    savingsRate: number;\n  }\n\n  const { data: summary } = useQuery<SummaryData>({\n    queryKey: [\"/api/analysis/summary\"],\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('zh-TW', {\n      style: 'currency',\n      currency: 'TWD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  // Process monthly trend data\n  const processMonthlyData = () => {\n    const monthlyData: { [key: string]: any } = {};\n    \n    // Process income\n    incomeRecords.forEach(record => {\n      const month = new Date(record.date).toLocaleDateString('zh-TW', { year: 'numeric', month: 'short' });\n      if (!monthlyData[month]) {\n        monthlyData[month] = { month, income: 0, expenses: 0 };\n      }\n      monthlyData[month].income += parseFloat(record.amount);\n    });\n\n    // Process expenses\n    expenseRecords.forEach(record => {\n      const month = new Date(record.date).toLocaleDateString('zh-TW', { year: 'numeric', month: 'short' });\n      if (!monthlyData[month]) {\n        monthlyData[month] = { month, income: 0, expenses: 0 };\n      }\n      monthlyData[month].expenses += parseFloat(record.amount);\n    });\n\n    return Object.values(monthlyData).map((item: any) => ({\n      ...item,\n      netIncome: item.income - item.expenses\n    }));\n  };\n\n  // Process income by type\n  const processIncomeByType = () => {\n    const typeData: { [key: string]: number } = {};\n    \n    incomeRecords.forEach(record => {\n      const amount = parseFloat(record.amount);\n      typeData[record.type] = (typeData[record.type] || 0) + amount;\n    });\n\n    return Object.entries(typeData).map(([type, amount]) => ({\n      name: type === 'salary' ? '薪資收入' : \n            type === 'investment' ? '投資收入' : '創業收入',\n      value: amount,\n    }));\n  };\n\n  // Process expenses by category\n  const processExpensesByCategory = () => {\n    const categoryData: { [key: string]: number } = {};\n    \n    expenseRecords.forEach(record => {\n      const amount = parseFloat(record.amount);\n      categoryData[record.category] = (categoryData[record.category] || 0) + amount;\n    });\n\n    const categoryNames: { [key: string]: string } = {\n      living: \"生活費用\",\n      loan: \"貸款支出\",\n      insurance: \"保險費用\",\n      investment: \"投資支出\",\n      entertainment: \"娛樂支出\",\n      other: \"其他支出\"\n    };\n\n    return Object.entries(categoryData).map(([category, amount]) => ({\n      name: categoryNames[category] || category,\n      value: amount,\n    }));\n  };\n\n  const monthlyData = processMonthlyData();\n  const incomeByType = processIncomeByType();\n  const expensesByCategory = processExpensesByCategory();\n\n  const COLORS = ['#10B981', '#1E40AF', '#F59E0B', '#EF4444', '#8B5CF6', '#6B7280'];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200 p-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-semibold text-slate-800\">財務分析</h2>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"card-total-income\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-green-100 rounded-full mr-4\">\n                  <i className=\"fas fa-arrow-trend-up text-success\"></i>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-600\">總收入</p>\n                  <p className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-total-income\">\n                    {formatCurrency(summary?.totalIncome || 0)}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"card-total-expenses\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-red-100 rounded-full mr-4\">\n                  <i className=\"fas fa-arrow-trend-down text-warning\"></i>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-600\">總支出</p>\n                  <p className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-total-expenses\">\n                    {formatCurrency(summary?.totalExpenses || 0)}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"card-net-income\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-blue-100 rounded-full mr-4\">\n                  <i className=\"fas fa-wallet text-primary\"></i>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-600\">淨收入</p>\n                  <p className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-net-income\">\n                    {formatCurrency(summary?.netIncome || 0)}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"card-savings-rate\">\n              <div className=\"flex items-center\">\n                <div className=\"p-3 bg-purple-100 rounded-full mr-4\">\n                  <i className=\"fas fa-piggy-bank text-purple-600\"></i>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-600\">儲蓄率</p>\n                  <p className=\"text-2xl font-bold text-slate-800\" data-testid=\"text-savings-rate\">\n                    {(summary?.savingsRate || 0).toFixed(1)}%\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Charts Row 1 */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            {/* Monthly Trend */}\n            <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"chart-monthly-trend\">\n              <h3 className=\"text-lg font-semibold text-slate-800 mb-6\">收支趨勢分析</h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={monthlyData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#F1F5F9\" />\n                  <XAxis dataKey=\"month\" stroke=\"#64748B\" />\n                  <YAxis stroke=\"#64748B\" />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"income\" \n                    stroke=\"#10B981\" \n                    strokeWidth={2}\n                    dot={{ fill: '#10B981' }}\n                    name=\"收入\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"expenses\" \n                    stroke=\"#EF4444\" \n                    strokeWidth={2}\n                    dot={{ fill: '#EF4444' }}\n                    name=\"支出\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"netIncome\" \n                    stroke=\"#1E40AF\" \n                    strokeWidth={2}\n                    dot={{ fill: '#1E40AF' }}\n                    name=\"淨收入\"\n                  />\n                  <Legend />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n\n            {/* Income by Type */}\n            <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"chart-income-by-type\">\n              <h3 className=\"text-lg font-semibold text-slate-800 mb-6\">收入來源分布</h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={incomeByType}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                  >\n                    {incomeByType.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Legend />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Charts Row 2 */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            {/* Expenses by Category */}\n            <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"chart-expenses-by-category\">\n              <h3 className=\"text-lg font-semibold text-slate-800 mb-6\">支出類別分布</h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={expensesByCategory}>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#F1F5F9\" />\n                  <XAxis dataKey=\"name\" stroke=\"#64748B\" />\n                  <YAxis stroke=\"#64748B\" />\n                  <Bar dataKey=\"value\" fill=\"#EF4444\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n\n            {/* Financial Health Indicators */}\n            <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"section-financial-health\">\n              <h3 className=\"text-lg font-semibold text-slate-800 mb-6\">財務健康指標</h3>\n              <div className=\"space-y-6\">\n                {/* Savings Rate */}\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-slate-600\">儲蓄率</span>\n                    <span className={`font-medium ${(summary?.savingsRate || 0) >= 20 ? 'text-success' : 'text-warning'}`}>\n                      {(summary?.savingsRate || 0).toFixed(1)}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-3\">\n                    <div \n                      className={`h-3 rounded-full ${(summary?.savingsRate || 0) >= 20 ? 'bg-success' : 'bg-warning'}`}\n                      style={{ width: `${Math.min(summary?.savingsRate || 0, 100)}%` }}\n                    ></div>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">健康範圍: ≥ 20%</p>\n                </div>\n\n                {/* Emergency Fund Ratio */}\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-slate-600\">緊急備用金比率</span>\n                    <span className=\"font-medium text-neutral\">6.2</span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-3\">\n                    <div className=\"bg-success h-3 rounded-full\" style={{ width: \"62%\" }}></div>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">建議範圍: 3-6個月支出</p>\n                </div>\n\n                {/* Expense Ratio */}\n                <div>\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-slate-600\">支出收入比</span>\n                    <span className=\"font-medium text-success\">\n                      {summary?.totalIncome && summary.totalIncome > 0 \n                        ? ((summary.totalExpenses / summary.totalIncome) * 100).toFixed(1)\n                        : 0}%\n                    </span>\n                  </div>\n                  <div className=\"w-full bg-slate-200 rounded-full h-3\">\n                    <div \n                      className=\"bg-success h-3 rounded-full\"\n                      style={{ \n                        width: `${summary?.totalIncome && summary.totalIncome > 0 \n                          ? Math.min((summary.totalExpenses / summary.totalIncome) * 100, 100)\n                          : 0}%` \n                      }}\n                    ></div>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">健康範圍: ≤ 80%</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Financial Insights */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"section-financial-insights\">\n            <h3 className=\"text-lg font-semibold text-slate-800 mb-6\">財務洞察</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"flex items-center mb-2\">\n                  <i className=\"fas fa-lightbulb text-success mr-2\"></i>\n                  <span className=\"font-medium text-success\">理財建議</span>\n                </div>\n                <p className=\"text-sm text-green-700\">\n                  您的儲蓄率表現良好，建議將多餘資金投資於穩健型理財產品以增加被動收入。\n                </p>\n              </div>\n\n              <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <div className=\"flex items-center mb-2\">\n                  <i className=\"fas fa-chart-line text-primary mr-2\"></i>\n                  <span className=\"font-medium text-primary\">投資建議</span>\n                </div>\n                <p className=\"text-sm text-blue-700\">\n                  考慮增加投資收入比重，建議將部分儲蓄投資於基金或股票以提升整體報酬率。\n                </p>\n              </div>\n\n              <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                <div className=\"flex items-center mb-2\">\n                  <i className=\"fas fa-exclamation-triangle text-yellow-600 mr-2\"></i>\n                  <span className=\"font-medium text-yellow-600\">支出提醒</span>\n                </div>\n                <p className=\"text-sm text-yellow-700\">\n                  注意控制娛樂支出，建議設定每月預算上限以維持健康的財務狀況。\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":14980},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport OverviewCards from \"@/components/financial/overview-cards\";\nimport IncomeCharts from \"@/components/financial/income-charts\";\nimport IncomeModules from \"@/components/financial/income-modules\";\nimport ExpenseTracking from \"@/components/financial/expense-tracking\";\nimport LoanAssessment from \"@/components/financial/loan-assessment\";\nimport IncomeModal from \"@/components/modals/income-modal\";\nimport ExpenseModal from \"@/components/modals/expense-modal\";\n\nexport default function Dashboard() {\n  const [selectedTimeRange, setSelectedTimeRange] = useState(\"本月\");\n  const [incomeModalOpen, setIncomeModalOpen] = useState(false);\n  const [expenseModalOpen, setExpenseModalOpen] = useState(false);\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200 p-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-semibold text-slate-800\">財務總覽</h2>\n            <div className=\"flex items-center space-x-4\">\n              <select \n                className=\"border border-slate-300 rounded-lg px-3 py-2 text-sm\"\n                value={selectedTimeRange}\n                onChange={(e) => setSelectedTimeRange(e.target.value)}\n                data-testid=\"select-time-range\"\n              >\n                <option>本月</option>\n                <option>最近3個月</option>\n                <option>最近6個月</option>\n                <option>本年度</option>\n              </select>\n              <button \n                className=\"bg-primary text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700\"\n                onClick={() => setIncomeModalOpen(true)}\n                data-testid=\"button-add-record\"\n              >\n                <i className=\"fas fa-plus mr-2\"></i>新增資料\n              </button>\n            </div>\n          </div>\n        </header>\n\n        {/* Dashboard Content */}\n        <div className=\"p-6\">\n          <OverviewCards timeRange={selectedTimeRange} />\n          <IncomeCharts timeRange={selectedTimeRange} />\n          <IncomeModules onAddIncome={() => setIncomeModalOpen(true)} />\n          <ExpenseTracking onAddExpense={() => setExpenseModalOpen(true)} />\n          <LoanAssessment />\n        </div>\n      </main>\n\n      <IncomeModal \n        open={incomeModalOpen} \n        onClose={() => setIncomeModalOpen(false)} \n      />\n      <ExpenseModal \n        open={expenseModalOpen} \n        onClose={() => setExpenseModalOpen(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":2755},"client/src/pages/entrepreneurship.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport Layout from \"@/components/layout/layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertEntrepreneurshipProjectSchema, type EntrepreneurshipProject } from \"@shared/schema\";\nimport { Plus, Building2, BarChart3, Calendar, DollarSign } from \"lucide-react\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\n// 會計損益表科目\nconst ACCOUNTING_CATEGORIES = {\n  revenue: {\n    label: \"營業收入\",\n    items: [\n      { value: \"sales_revenue\", label: \"銷貨收入\" },\n      { value: \"service_revenue\", label: \"勞務收入\" },\n      { value: \"other_revenue\", label: \"其他營業收入\" }\n    ]\n  },\n  expense: {\n    label: \"營業費用\",\n    items: [\n      { value: \"cost_of_goods_sold\", label: \"銷貨成本\" },\n      { value: \"marketing_expense\", label: \"行銷費用\" },\n      { value: \"admin_expense\", label: \"管理費用\" },\n      { value: \"research_development\", label: \"研發費用\" },\n      { value: \"rent_expense\", label: \"租金費用\" },\n      { value: \"salary_expense\", label: \"薪資費用\" },\n      { value: \"equipment_expense\", label: \"設備費用\" },\n      { value: \"material_expense\", label: \"材料費用\" },\n      { value: \"other_expense\", label: \"其他營業費用\" }\n    ]\n  }\n};\n\nconst projectFormSchema = insertEntrepreneurshipProjectSchema.extend({\n  startDate: z.string().min(1, \"請選擇開始日期\"),\n});\n\nexport default function EntrepreneurshipPage() {\n  const [selectedProject, setSelectedProject] = useState<EntrepreneurshipProject | null>(null);\n  const [isProjectModalOpen, setIsProjectModalOpen] = useState(false);\n\n  const { data: projects = [] } = useQuery<EntrepreneurshipProject[]>({\n    queryKey: [\"/api/entrepreneurship/projects\"],\n  });\n\n  const createProjectMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof projectFormSchema>) => {\n      const response = await fetch(\"/api/entrepreneurship/projects\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error(\"Failed to create project\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/entrepreneurship/projects\"] });\n      setIsProjectModalOpen(false);\n      toast({ description: \"專案創建成功！\" });\n    },\n    onError: () => {\n      toast({ description: \"創建專案失敗\", variant: \"destructive\" });\n    },\n  });\n\n  const form = useForm<z.infer<typeof projectFormSchema>>({\n    resolver: zodResolver(projectFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      startDate: new Date().toISOString().split('T')[0],\n      status: \"active\",\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof projectFormSchema>) => {\n    createProjectMutation.mutate(data);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      active: { label: \"進行中\", variant: \"default\" as const },\n      completed: { label: \"已完成\", variant: \"secondary\" as const },\n      paused: { label: \"暫停\", variant: \"outline\" as const },\n    };\n    return statusMap[status as keyof typeof statusMap] || statusMap.active;\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('zh-TW', {\n      style: 'currency',\n      currency: 'TWD',\n      minimumFractionDigits: 0,\n    }).format(Number(amount));\n  };\n\n  return (\n    <Layout title=\"52系統\" subtitle=\"創業管理\">\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-slate-900\" data-testid=\"text-page-title\">\n              創業管理\n            </h1>\n            <p className=\"text-slate-600 mt-1\">\n              管理創業專案，追蹤損益表現\n            </p>\n          </div>\n          <Dialog open={isProjectModalOpen} onOpenChange={setIsProjectModalOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-project\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                新增專案\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle>新增創業專案</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>專案名稱</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"輸入專案名稱\" data-testid=\"input-project-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>專案描述</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"專案簡介\" data-testid=\"input-project-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"startDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>開始日期</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-project-start-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>狀態</FormLabel>\n                        <Select value={field.value} onValueChange={field.onChange}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-project-status\">\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"active\">進行中</SelectItem>\n                            <SelectItem value=\"paused\">暫停</SelectItem>\n                            <SelectItem value=\"completed\">已完成</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end space-x-2\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setIsProjectModalOpen(false)}\n                      data-testid=\"button-cancel\"\n                    >\n                      取消\n                    </Button>\n                    <Button \n                      type=\"submit\"\n                      disabled={createProjectMutation.isPending}\n                      data-testid=\"button-submit\"\n                    >\n                      {createProjectMutation.isPending ? \"創建中...\" : \"創建\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Projects Grid */}\n        {projects.length === 0 ? (\n          <Card className=\"text-center py-12\">\n            <CardContent>\n              <Building2 className=\"w-12 h-12 text-slate-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-slate-900 mb-2\">還沒有創業專案</h3>\n              <p className=\"text-slate-600 mb-4\">創建您的第一個創業專案，開始追蹤損益表現</p>\n              <Button onClick={() => setIsProjectModalOpen(true)} data-testid=\"button-create-first-project\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                創建專案\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {projects.map((project) => {\n              const statusBadge = getStatusBadge(project.status);\n              return (\n                <Card \n                  key={project.id} \n                  className=\"hover:shadow-md transition-shadow cursor-pointer\"\n                  onClick={() => setSelectedProject(project)}\n                  data-testid={`card-project-${project.id}`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <CardTitle className=\"text-lg\">{project.name}</CardTitle>\n                      <Badge variant={statusBadge.variant}>\n                        {statusBadge.label}\n                      </Badge>\n                    </div>\n                    {project.description && (\n                      <p className=\"text-sm text-slate-600 line-clamp-2\">\n                        {project.description}\n                      </p>\n                    )}\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"flex items-center text-sm text-slate-600 mb-3\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      開始：{new Date(project.startDate).toLocaleDateString('zh-TW')}\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center text-sm text-slate-600\">\n                        <BarChart3 className=\"w-4 h-4 mr-2\" />\n                        損益表\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\">\n                        查看詳情\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Project Detail Modal */}\n        {selectedProject && (\n          <Dialog \n            open={!!selectedProject} \n            onOpenChange={() => setSelectedProject(null)}\n          >\n            <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <Building2 className=\"w-5 h-5\" />\n                  {selectedProject.name}\n                  <Badge variant={getStatusBadge(selectedProject.status).variant}>\n                    {getStatusBadge(selectedProject.status).label}\n                  </Badge>\n                </DialogTitle>\n              </DialogHeader>\n              \n              <div className=\"space-y-6\">\n                {/* Project Info */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-2\">專案描述</h4>\n                    <p className=\"text-slate-600\">{selectedProject.description || \"無描述\"}</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-slate-900 mb-2\">開始日期</h4>\n                    <p className=\"text-slate-600\">\n                      {new Date(selectedProject.startDate).toLocaleDateString('zh-TW')}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Accounting Categories */}\n                <div>\n                  <h4 className=\"font-medium text-slate-900 mb-4\">損益表科目</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    {/* Revenue Categories */}\n                    <div>\n                      <h5 className=\"font-medium text-green-700 mb-3 flex items-center\">\n                        <DollarSign className=\"w-4 h-4 mr-2\" />\n                        {ACCOUNTING_CATEGORIES.revenue.label}\n                      </h5>\n                      <div className=\"space-y-2\">\n                        {ACCOUNTING_CATEGORIES.revenue.items.map((item) => (\n                          <div \n                            key={item.value}\n                            className=\"p-3 bg-green-50 rounded-lg border border-green-200\"\n                          >\n                            <span className=\"text-sm font-medium text-green-800\">\n                              {item.label}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Expense Categories */}\n                    <div>\n                      <h5 className=\"font-medium text-red-700 mb-3 flex items-center\">\n                        <DollarSign className=\"w-4 h-4 mr-2\" />\n                        {ACCOUNTING_CATEGORIES.expense.label}\n                      </h5>\n                      <div className=\"space-y-2\">\n                        {ACCOUNTING_CATEGORIES.expense.items.map((item) => (\n                          <div \n                            key={item.value}\n                            className=\"p-3 bg-red-50 rounded-lg border border-red-200\"\n                          >\n                            <span className=\"text-sm font-medium text-red-800\">\n                              {item.label}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Note about P&L tracking */}\n                <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                  <h5 className=\"font-medium text-blue-800 mb-2\">52系統雙軌設計</h5>\n                  <p className=\"text-sm text-blue-700\">\n                    此專案支援計畫 vs 現實的雙軌比較，您可以在每個會計科目中記錄計畫金額和實際金額，\n                    系統將自動分析差異，幫助您掌握專案的財務表現。\n                  </p>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n      </div>\n    </Layout>\n  );\n}","size_bytes":15633},"client/src/pages/expenses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ExpenseRecord, Budget } from \"@shared/schema\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport ExpenseModal from \"@/components/modals/expense-modal\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function ExpensesPage() {\n  const [expenseModalOpen, setExpenseModalOpen] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const queryClient = useQueryClient();\n\n  const { data: expenseRecords = [], isLoading } = useQuery<ExpenseRecord[]>({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const { data: budgets = [] } = useQuery<Budget[]>({\n    queryKey: [\"/api/budgets\"],\n  });\n\n  const deleteExpenseMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/expenses/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analysis/summary\"] });\n    },\n  });\n\n  const filteredRecords = selectedCategory === \"all\" \n    ? expenseRecords \n    : expenseRecords.filter(record => record.category === selectedCategory);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('zh-TW', {\n      style: 'currency',\n      currency: 'TWD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getCategoryName = (category: string) => {\n    const names: { [key: string]: string } = {\n      living: \"生活費用\",\n      loan: \"貸款支出\",\n      insurance: \"保險費用\",\n      investment: \"投資支出\",\n      entertainment: \"娛樂支出\",\n      other: \"其他支出\"\n    };\n    return names[category] || category;\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      living: \"fas fa-utensils\",\n      loan: \"fas fa-home\",\n      insurance: \"fas fa-shield-alt\",\n      investment: \"fas fa-chart-line\",\n      entertainment: \"fas fa-gamepad\",\n      other: \"fas fa-ellipsis-h\"\n    };\n    return icons[category] || \"fas fa-circle\";\n  };\n\n  const getCategoryBudget = (category: string) => {\n    const budget = budgets.find(b => b.category === category);\n    return budget ? parseFloat(budget.amount) : 0;\n  };\n\n  const getCategoryTotal = (category: string) => {\n    return expenseRecords\n      .filter(record => record.category === category)\n      .reduce((sum, record) => sum + parseFloat(record.amount), 0);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <Sidebar />\n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">\n            <div className=\"text-center\">載入中...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200 p-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-semibold text-slate-800\">支出管理</h2>\n            <Button \n              onClick={() => setExpenseModalOpen(true)}\n              className=\"bg-warning text-white hover:bg-red-600\"\n              data-testid=\"button-add-expense\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>新增支出記錄\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {/* Filter Tabs */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6 mb-6\">\n            <div className=\"border-b border-slate-200 mb-6\">\n              <nav className=\"-mb-px flex space-x-8\">\n                {[\n                  { key: \"all\", label: \"全部支出\" },\n                  { key: \"living\", label: \"生活費用\" },\n                  { key: \"loan\", label: \"貸款支出\" },\n                  { key: \"insurance\", label: \"保險費用\" },\n                  { key: \"investment\", label: \"投資支出\" },\n                  { key: \"entertainment\", label: \"娛樂支出\" },\n                  { key: \"other\", label: \"其他支出\" },\n                ].map((tab) => (\n                  <button\n                    key={tab.key}\n                    className={`border-b-2 font-medium text-sm py-2 px-1 ${\n                      selectedCategory === tab.key\n                        ? \"border-warning text-warning\"\n                        : \"border-transparent text-slate-500 hover:text-slate-700\"\n                    }`}\n                    onClick={() => setSelectedCategory(tab.key)}\n                    data-testid={`tab-${tab.key}`}\n                  >\n                    {tab.label}\n                  </button>\n                ))}\n              </nav>\n            </div>\n\n            {/* Expense Records Table */}\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"text-left border-b border-slate-200\">\n                    <th className=\"pb-3 text-slate-600 font-medium\">日期</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">類別</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">描述</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">金額</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">備註</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">操作</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredRecords.length === 0 ? (\n                    <tr>\n                      <td colSpan={6} className=\"py-8 text-center text-slate-500\">\n                        <i className=\"fas fa-inbox text-4xl mb-4 block\"></i>\n                        還沒有支出記錄，點擊上方按鈕新增第一筆記錄\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredRecords.map((record) => (\n                      <tr key={record.id} className=\"border-b border-slate-100 hover:bg-slate-50\" data-testid={`row-expense-${record.id}`}>\n                        <td className=\"py-4 text-slate-800\">\n                          {new Date(record.date).toLocaleDateString('zh-TW')}\n                        </td>\n                        <td className=\"py-4\">\n                          <div className=\"flex items-center\">\n                            <div className=\"p-1 bg-red-100 rounded mr-2\">\n                              <i className={`${getCategoryIcon(record.category)} text-warning text-xs`}></i>\n                            </div>\n                            <span className=\"text-slate-800\">{getCategoryName(record.category)}</span>\n                          </div>\n                        </td>\n                        <td className=\"py-4 text-slate-800 max-w-xs truncate\">\n                          {record.description || '-'}\n                        </td>\n                        <td className=\"py-4 font-bold text-warning\" data-testid={`text-amount-${record.id}`}>\n                          {formatCurrency(parseFloat(record.amount))}\n                        </td>\n                        <td className=\"py-4 text-slate-600 max-w-xs truncate\">\n                          {record.notes || '-'}\n                        </td>\n                        <td className=\"py-4\">\n                          <div className=\"flex space-x-2\">\n                            <button \n                              className=\"p-1 text-slate-400 hover:text-primary\"\n                              data-testid={`button-edit-${record.id}`}\n                            >\n                              <i className=\"fas fa-edit text-sm\"></i>\n                            </button>\n                            <button \n                              className=\"p-1 text-slate-400 hover:text-warning\"\n                              onClick={() => deleteExpenseMutation.mutate(record.id)}\n                              data-testid={`button-delete-${record.id}`}\n                            >\n                              <i className=\"fas fa-trash text-sm\"></i>\n                            </button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Category Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[\"living\", \"loan\", \"insurance\", \"investment\", \"entertainment\", \"other\"].map((category) => {\n              const total = getCategoryTotal(category);\n              const budget = getCategoryBudget(category);\n              const progress = budget > 0 ? Math.min((total / budget) * 100, 100) : 0;\n              const remaining = budget - total;\n              const transactionCount = expenseRecords.filter(record => record.category === category).length;\n              \n              return (\n                <div key={category} className=\"bg-white rounded-xl shadow-sm p-6\" data-testid={`card-stats-${category}`}>\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"p-2 bg-red-100 rounded-lg mr-3\">\n                      <i className={`${getCategoryIcon(category)} text-warning`}></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-slate-800\">{getCategoryName(category)}</h4>\n                      <p className=\"text-sm text-slate-500\">{transactionCount} 筆交易</p>\n                    </div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-slate-600\">本月支出</span>\n                      <span className=\"font-bold text-warning\" data-testid={`text-total-${category}`}>\n                        {formatCurrency(total)}\n                      </span>\n                    </div>\n                    {budget > 0 && (\n                      <>\n                        <div className=\"w-full bg-slate-200 rounded-full h-2\">\n                          <div \n                            className=\"bg-warning h-2 rounded-full transition-all duration-300\" \n                            style={{ width: `${progress}%` }}\n                            data-testid={`progress-${category}`}\n                          ></div>\n                        </div>\n                        <div className=\"flex justify-between text-xs text-slate-500\">\n                          <span>預算: {formatCurrency(budget)}</span>\n                          <span className={remaining >= 0 ? \"text-success\" : \"text-warning\"}>\n                            {remaining >= 0 ? \"剩餘\" : \"超支\"}: {formatCurrency(Math.abs(remaining))}\n                          </span>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </main>\n\n      <ExpenseModal \n        open={expenseModalOpen} \n        onClose={() => setExpenseModalOpen(false)} \n      />\n    </div>\n  );\n}","size_bytes":11478},"client/src/pages/income.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { IncomeRecord } from \"@shared/schema\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport IncomeModal from \"@/components/modals/income-modal\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function IncomePage() {\n  const [incomeModalOpen, setIncomeModalOpen] = useState(false);\n  const [selectedType, setSelectedType] = useState(\"all\");\n  const queryClient = useQueryClient();\n\n  const { data: incomeRecords = [], isLoading } = useQuery<IncomeRecord[]>({\n    queryKey: [\"/api/income\"],\n  });\n\n  const deleteIncomeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/income/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/income\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analysis/summary\"] });\n    },\n  });\n\n  const filteredRecords = selectedType === \"all\" \n    ? incomeRecords \n    : incomeRecords.filter(record => record.type === selectedType);\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('zh-TW', {\n      style: 'currency',\n      currency: 'TWD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(amount));\n  };\n\n  const getCategoryName = (category: string, type: string) => {\n    const categories: { [key: string]: { [key: string]: string } } = {\n      salary: {\n        base: \"基本月薪\",\n        bonus: \"年終獎金\",\n        overtime: \"加班費\",\n        allowance: \"津貼補助\",\n        other: \"其他薪資\"\n      },\n      investment: {\n        dividend: \"股票股利\",\n        interest: \"債券利息\",\n        fund: \"基金收益\",\n        rent: \"房租收入\",\n        other: \"其他投資\"\n      },\n      business: {\n        revenue: \"營業收入\",\n        side: \"副業收入\",\n        consulting: \"顧問費用\",\n        royalty: \"版權收入\",\n        other: \"其他創業\"\n      }\n    };\n    return categories[type]?.[category] || category;\n  };\n\n  const getTypeLabel = (type: string) => {\n    const types: { [key: string]: string } = {\n      salary: \"薪資收入\",\n      investment: \"投資收入\",\n      business: \"創業收入\"\n    };\n    return types[type] || type;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n        <Sidebar />\n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">\n            <div className=\"text-center\">載入中...</div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200 p-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-semibold text-slate-800\">收入管理</h2>\n            <Button \n              onClick={() => setIncomeModalOpen(true)}\n              className=\"bg-primary text-white hover:bg-blue-700\"\n              data-testid=\"button-add-income\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>新增收入記錄\n            </Button>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          {/* Filter Tabs */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6 mb-6\">\n            <div className=\"border-b border-slate-200 mb-6\">\n              <nav className=\"-mb-px flex space-x-8\">\n                {[\n                  { key: \"all\", label: \"全部收入\" },\n                  { key: \"salary\", label: \"薪資收入\" },\n                  { key: \"investment\", label: \"投資收入\" },\n                  { key: \"business\", label: \"創業收入\" },\n                ].map((tab) => (\n                  <button\n                    key={tab.key}\n                    className={`border-b-2 font-medium text-sm py-2 px-1 ${\n                      selectedType === tab.key\n                        ? \"border-primary text-primary\"\n                        : \"border-transparent text-slate-500 hover:text-slate-700\"\n                    }`}\n                    onClick={() => setSelectedType(tab.key)}\n                    data-testid={`tab-${tab.key}`}\n                  >\n                    {tab.label}\n                  </button>\n                ))}\n              </nav>\n            </div>\n\n            {/* Income Records Table */}\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"text-left border-b border-slate-200\">\n                    <th className=\"pb-3 text-slate-600 font-medium\">日期</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">類型</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">項目</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">金額</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">備註</th>\n                    <th className=\"pb-3 text-slate-600 font-medium\">操作</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredRecords.length === 0 ? (\n                    <tr>\n                      <td colSpan={6} className=\"py-8 text-center text-slate-500\">\n                        <i className=\"fas fa-inbox text-4xl mb-4 block\"></i>\n                        還沒有收入記錄，點擊上方按鈕新增第一筆記錄\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredRecords.map((record) => (\n                      <tr key={record.id} className=\"border-b border-slate-100 hover:bg-slate-50\" data-testid={`row-income-${record.id}`}>\n                        <td className=\"py-4 text-slate-800\">\n                          {new Date(record.date).toLocaleDateString('zh-TW')}\n                        </td>\n                        <td className=\"py-4\">\n                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                            record.type === 'salary' ? 'bg-green-100 text-green-800' :\n                            record.type === 'investment' ? 'bg-blue-100 text-blue-800' :\n                            'bg-yellow-100 text-yellow-800'\n                          }`}>\n                            {getTypeLabel(record.type)}\n                          </span>\n                        </td>\n                        <td className=\"py-4 text-slate-800\">\n                          {getCategoryName(record.category, record.type)}\n                        </td>\n                        <td className=\"py-4 font-bold text-success\" data-testid={`text-amount-${record.id}`}>\n                          {formatCurrency(record.amount)}\n                        </td>\n                        <td className=\"py-4 text-slate-600 max-w-xs truncate\">\n                          {record.notes || '-'}\n                        </td>\n                        <td className=\"py-4\">\n                          <div className=\"flex space-x-2\">\n                            <button \n                              className=\"p-1 text-slate-400 hover:text-primary\"\n                              data-testid={`button-edit-${record.id}`}\n                            >\n                              <i className=\"fas fa-edit text-sm\"></i>\n                            </button>\n                            <button \n                              className=\"p-1 text-slate-400 hover:text-warning\"\n                              onClick={() => deleteIncomeMutation.mutate(record.id)}\n                              data-testid={`button-delete-${record.id}`}\n                            >\n                              <i className=\"fas fa-trash text-sm\"></i>\n                            </button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n\n          {/* Statistics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[\"salary\", \"investment\", \"business\"].map((type) => {\n              const typeRecords = incomeRecords.filter(record => record.type === type);\n              const total = typeRecords.reduce((sum, record) => sum + parseFloat(record.amount), 0);\n              const count = typeRecords.length;\n              \n              return (\n                <div key={type} className=\"bg-white rounded-xl shadow-sm p-6\" data-testid={`card-stats-${type}`}>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-semibold text-slate-800\">\n                      {getTypeLabel(type)}\n                    </h3>\n                    <div className={`p-2 rounded-lg ${\n                      type === 'salary' ? 'bg-green-100' :\n                      type === 'investment' ? 'bg-blue-100' :\n                      'bg-yellow-100'\n                    }`}>\n                      <i className={`${\n                        type === 'salary' ? 'fas fa-coins text-green-600' :\n                        type === 'investment' ? 'fas fa-chart-line text-blue-600' :\n                        'fas fa-briefcase text-yellow-600'\n                      }`}></i>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">總金額</span>\n                      <span className=\"font-bold text-success\" data-testid={`text-total-${type}`}>\n                        {formatCurrency(total.toString())}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">記錄數</span>\n                      <span className=\"font-medium text-slate-800\">{count} 筆</span>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </main>\n\n      <IncomeModal \n        open={incomeModalOpen} \n        onClose={() => setIncomeModalOpen(false)} \n      />\n    </div>\n  );\n}","size_bytes":10492},"client/src/pages/loan.tsx":{"content":"import Sidebar from \"@/components/layout/sidebar\";\nimport LoanAssessment from \"@/components/financial/loan-assessment\";\n\nexport default function LoanPage() {\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-slate-50\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200 p-6\">\n          <div className=\"flex justify-between items-center\">\n            <h2 className=\"text-2xl font-semibold text-slate-800\">貸款評估</h2>\n          </div>\n        </header>\n\n        {/* Content */}\n        <div className=\"p-6\">\n          <LoanAssessment />\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":718},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/financial/expense-tracking.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ExpenseRecord, Budget } from \"@shared/schema\";\n\ninterface ExpenseTrackingProps {\n  onAddExpense: () => void;\n}\n\nexport default function ExpenseTracking({ onAddExpense }: ExpenseTrackingProps) {\n  const queryClient = useQueryClient();\n\n  const { data: expenseRecords = [] } = useQuery<ExpenseRecord[]>({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  const { data: budgets = [] } = useQuery<Budget[]>({\n    queryKey: [\"/api/budgets\"],\n  });\n\n  const deleteExpenseMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/expenses/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n    },\n  });\n\n  const getCategoryName = (category: string) => {\n    const names: { [key: string]: string } = {\n      living: \"生活費用\",\n      loan: \"貸款支出\",\n      insurance: \"保險費用\",\n      investment: \"投資支出\",\n      entertainment: \"娛樂支出\",\n      other: \"其他支出\"\n    };\n    return names[category] || category;\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: string } = {\n      living: \"fas fa-utensils\",\n      loan: \"fas fa-home\",\n      insurance: \"fas fa-shield-alt\",\n      investment: \"fas fa-chart-line\",\n      entertainment: \"fas fa-gamepad\",\n      other: \"fas fa-ellipsis-h\"\n    };\n    return icons[category] || \"fas fa-circle\";\n  };\n\n  // Group expenses by category\n  const expensesByCategory = expenseRecords.reduce((acc, record) => {\n    const category = record.category;\n    if (!acc[category]) {\n      acc[category] = [];\n    }\n    acc[category].push(record);\n    return acc;\n  }, {} as { [key: string]: ExpenseRecord[] });\n\n  const categories = Object.keys(expensesByCategory);\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('zh-TW', {\n      style: 'currency',\n      currency: 'TWD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const getCategoryTotal = (category: string) => {\n    return expensesByCategory[category]?.reduce((sum, record) => sum + parseFloat(record.amount), 0) || 0;\n  };\n\n  const getCategoryBudget = (category: string) => {\n    const budget = budgets.find(b => b.category === category);\n    return budget ? parseFloat(budget.amount) : 0;\n  };\n\n  const getProgressPercentage = (category: string) => {\n    const total = getCategoryTotal(category);\n    const budget = getCategoryBudget(category);\n    return budget > 0 ? Math.min((total / budget) * 100, 100) : 0;\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm p-6 mb-8\" data-testid=\"section-expense-tracking\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-semibold text-slate-800\">支出追蹤</h3>\n        <button \n          className=\"bg-warning text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-red-600\"\n          onClick={onAddExpense}\n          data-testid=\"button-add-expense\"\n        >\n          <i className=\"fas fa-plus mr-2\"></i>新增支出記錄\n        </button>\n      </div>\n\n      {/* Expense Categories Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {categories.map((category) => {\n          const total = getCategoryTotal(category);\n          const budget = getCategoryBudget(category);\n          const progress = getProgressPercentage(category);\n          const remaining = budget - total;\n          const transactionCount = expensesByCategory[category].length;\n\n          return (\n            <div \n              key={category} \n              className=\"p-4 border border-slate-200 rounded-lg\"\n              data-testid={`card-expense-${category}`}\n            >\n              <div className=\"flex items-center mb-3\">\n                <div className=\"p-2 bg-red-100 rounded-lg mr-3\">\n                  <i className={`${getCategoryIcon(category)} text-warning`}></i>\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium text-slate-800\">{getCategoryName(category)}</h4>\n                  <p className=\"text-sm text-slate-500\">{transactionCount} 筆交易</p>\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-slate-600\">本月支出</span>\n                  <span className=\"font-bold text-warning\" data-testid={`text-total-${category}`}>\n                    {formatCurrency(total)}\n                  </span>\n                </div>\n                <div className=\"w-full bg-slate-200 rounded-full h-2\">\n                  <div \n                    className=\"bg-warning h-2 rounded-full transition-all duration-300\" \n                    style={{ width: `${progress}%` }}\n                    data-testid={`progress-${category}`}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between text-xs text-slate-500\">\n                  <span>預算: {formatCurrency(budget)}</span>\n                  <span className={remaining >= 0 ? \"text-success\" : \"text-warning\"}>\n                    {remaining >= 0 ? \"剩餘\" : \"超支\"}: {formatCurrency(Math.abs(remaining))}\n                  </span>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n\n        {/* Add Expense Card */}\n        <div \n          className=\"p-4 border-2 border-dashed border-slate-300 rounded-lg flex flex-col items-center justify-center text-slate-500 hover:border-warning hover:text-warning transition-colors cursor-pointer\"\n          onClick={onAddExpense}\n          data-testid=\"card-add-expense\"\n        >\n          <i className=\"fas fa-plus text-2xl mb-2\"></i>\n          <span className=\"text-sm font-medium\">新增支出類別</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6008},"client/src/components/financial/income-charts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, ResponsiveContainer, PieChart, Pie, Cell, Legend } from \"recharts\";\nimport type { IncomeRecord, ExpenseRecord } from \"@shared/schema\";\n\ninterface IncomeChartsProps {\n  timeRange: string;\n}\n\nexport default function IncomeCharts({ timeRange }: IncomeChartsProps) {\n  const { data: incomeRecords = [] } = useQuery<IncomeRecord[]>({\n    queryKey: [\"/api/income\"],\n  });\n\n  const { data: expenseRecords = [] } = useQuery<ExpenseRecord[]>({\n    queryKey: [\"/api/expenses\"],\n  });\n\n  // Process income data for line chart\n  const processIncomeData = () => {\n    const monthlyData: { [key: string]: any } = {};\n    \n    incomeRecords.forEach(record => {\n      const month = new Date(record.date).toLocaleDateString('zh-TW', { month: 'short' });\n      if (!monthlyData[month]) {\n        monthlyData[month] = { month, salary: 0, investment: 0, business: 0 };\n      }\n      \n      const amount = parseFloat(record.amount);\n      switch (record.type) {\n        case 'salary':\n          monthlyData[month].salary += amount;\n          break;\n        case 'investment':\n          monthlyData[month].investment += amount;\n          break;\n        case 'business':\n          monthlyData[month].business += amount;\n          break;\n      }\n    });\n\n    return Object.values(monthlyData);\n  };\n\n  // Process expense data for pie chart\n  const processExpenseData = () => {\n    const categoryData: { [key: string]: number } = {};\n    \n    expenseRecords.forEach(record => {\n      const amount = parseFloat(record.amount);\n      categoryData[record.category] = (categoryData[record.category] || 0) + amount;\n    });\n\n    return Object.entries(categoryData).map(([category, amount]) => ({\n      name: getCategoryName(category),\n      value: amount,\n    }));\n  };\n\n  const getCategoryName = (category: string) => {\n    const names: { [key: string]: string } = {\n      living: \"生活費用\",\n      loan: \"貸款支出\",\n      insurance: \"保險費用\",\n      investment: \"投資支出\",\n      entertainment: \"娛樂支出\",\n      other: \"其他支出\"\n    };\n    return names[category] || category;\n  };\n\n  const incomeData = processIncomeData();\n  const expenseData = processExpenseData();\n\n  const COLORS = ['#EF4444', '#F59E0B', '#10B981', '#1E40AF', '#8B5CF6', '#6B7280'];\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n      {/* Income Trend Chart */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"chart-income-trend\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">收入趨勢分析</h3>\n          <div className=\"flex space-x-2\">\n            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-success\">\n              <i className=\"fas fa-circle mr-1\" style={{ fontSize: '6px' }}></i>薪資收入\n            </span>\n            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-blue-100 text-primary\">\n              <i className=\"fas fa-circle mr-1\" style={{ fontSize: '6px' }}></i>投資收入\n            </span>\n            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-600\">\n              <i className=\"fas fa-circle mr-1\" style={{ fontSize: '6px' }}></i>創業收入\n            </span>\n          </div>\n        </div>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={incomeData}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#F1F5F9\" />\n            <XAxis dataKey=\"month\" stroke=\"#64748B\" />\n            <YAxis stroke=\"#64748B\" />\n            <Line \n              type=\"monotone\" \n              dataKey=\"salary\" \n              stroke=\"#10B981\" \n              strokeWidth={2}\n              dot={{ fill: '#10B981' }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"investment\" \n              stroke=\"#1E40AF\" \n              strokeWidth={2}\n              dot={{ fill: '#1E40AF' }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"business\" \n              stroke=\"#F59E0B\" \n              strokeWidth={2}\n              dot={{ fill: '#F59E0B' }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n\n      {/* Expense Breakdown Chart */}\n      <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"chart-expense-breakdown\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-slate-800\">支出分布</h3>\n          <select className=\"border border-slate-300 rounded-lg px-3 py-2 text-sm\" data-testid=\"select-expense-period\">\n            <option>本月</option>\n            <option>上月</option>\n            <option>本季</option>\n          </select>\n        </div>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <PieChart>\n            <Pie\n              data={expenseData}\n              cx=\"50%\"\n              cy=\"50%\"\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n              label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n            >\n              {expenseData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n              ))}\n            </Pie>\n            <Legend />\n          </PieChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5582},"client/src/components/financial/income-modules.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { IncomeRecord } from \"@shared/schema\";\n\ninterface IncomeModulesProps {\n  onAddIncome: () => void;\n}\n\nexport default function IncomeModules({ onAddIncome }: IncomeModulesProps) {\n  const [activeTab, setActiveTab] = useState(\"salary\");\n  const queryClient = useQueryClient();\n\n  const { data: incomeRecords = [] } = useQuery<IncomeRecord[]>({\n    queryKey: [\"/api/income\"],\n  });\n\n  const deleteIncomeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/income/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/income\"] });\n    },\n  });\n\n  const filteredRecords = incomeRecords.filter(record => record.type === activeTab);\n\n  const tabs = [\n    { key: \"salary\", label: \"薪資收入\", testId: \"tab-salary\" },\n    { key: \"investment\", label: \"投資收入\", testId: \"tab-investment\" },\n    { key: \"business\", label: \"創業收入\", testId: \"tab-business\" },\n  ];\n\n  const getCategoryName = (category: string, type: string) => {\n    const categories: { [key: string]: { [key: string]: string } } = {\n      salary: {\n        base: \"基本月薪\",\n        bonus: \"年終獎金\",\n        overtime: \"加班費\",\n        allowance: \"津貼補助\",\n        other: \"其他薪資\"\n      },\n      investment: {\n        dividend: \"股票股利\",\n        interest: \"債券利息\",\n        fund: \"基金收益\",\n        rent: \"房租收入\",\n        other: \"其他投資\"\n      },\n      business: {\n        revenue: \"營業收入\",\n        side: \"副業收入\",\n        consulting: \"顧問費用\",\n        royalty: \"版權收入\",\n        other: \"其他創業\"\n      }\n    };\n    return categories[type]?.[category] || category;\n  };\n\n  const formatCurrency = (amount: string) => {\n    return new Intl.NumberFormat('zh-TW', {\n      style: 'currency',\n      currency: 'TWD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(amount));\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm p-6 mb-8\" data-testid=\"section-income-modules\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-semibold text-slate-800\">收入模塊管理</h3>\n        <button \n          className=\"bg-primary text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-blue-700\"\n          onClick={onAddIncome}\n          data-testid=\"button-add-income\"\n        >\n          <i className=\"fas fa-plus mr-2\"></i>新增收入記錄\n        </button>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"border-b border-slate-200 mb-6\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {tabs.map((tab) => (\n            <button\n              key={tab.key}\n              className={`border-b-2 font-medium text-sm py-2 px-1 ${\n                activeTab === tab.key\n                  ? \"border-primary text-primary\"\n                  : \"border-transparent text-slate-500 hover:text-slate-700\"\n              }`}\n              onClick={() => setActiveTab(tab.key)}\n              data-testid={tab.testId}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Income Records Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredRecords.map((record) => (\n          <div \n            key={record.id} \n            className=\"p-4 border border-slate-200 rounded-lg hover:border-slate-300 transition-colors\"\n            data-testid={`card-income-${record.id}`}\n          >\n            <div className=\"flex justify-between items-start mb-3\">\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-slate-800\">\n                  {getCategoryName(record.category, record.type)}\n                </h4>\n                <p className=\"text-2xl font-bold text-success mt-1\" data-testid={`text-amount-${record.id}`}>\n                  {formatCurrency(record.amount)}\n                </p>\n                <p className=\"text-xs text-slate-500 mt-1\">\n                  {new Date(record.date).toLocaleDateString('zh-TW')}\n                </p>\n              </div>\n              <div className=\"flex space-x-1\">\n                <button \n                  className=\"p-1 text-slate-400 hover:text-primary\"\n                  data-testid={`button-edit-${record.id}`}\n                >\n                  <i className=\"fas fa-edit text-sm\"></i>\n                </button>\n                <button \n                  className=\"p-1 text-slate-400 hover:text-warning\"\n                  onClick={() => deleteIncomeMutation.mutate(record.id)}\n                  data-testid={`button-delete-${record.id}`}\n                >\n                  <i className=\"fas fa-trash text-sm\"></i>\n                </button>\n              </div>\n            </div>\n            {record.notes && (\n              <div className=\"text-sm text-slate-600 mt-2\">\n                <span className=\"font-medium\">備註：</span>\n                {record.notes}\n              </div>\n            )}\n          </div>\n        ))}\n\n        {/* Add Income Card */}\n        <div \n          className=\"p-4 border-2 border-dashed border-slate-300 rounded-lg flex flex-col items-center justify-center text-slate-500 hover:border-primary hover:text-primary transition-colors cursor-pointer\"\n          onClick={onAddIncome}\n          data-testid=\"card-add-income\"\n        >\n          <i className=\"fas fa-plus text-2xl mb-2\"></i>\n          <span className=\"text-sm font-medium\">新增{tabs.find(t => t.key === activeTab)?.label}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5754},"client/src/components/financial/loan-assessment.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface LoanForm {\n  loanAmount: number;\n  downPayment: number;\n  loanTerm: number;\n  interestRate: number;\n}\n\ninterface LoanResult {\n  monthlyPayment: number;\n  principalPayment: number;\n  interestPayment: number;\n  debtRatio: number;\n  mortgageRatio: number;\n  isAffordable: boolean;\n}\n\nexport default function LoanAssessment() {\n  const [loanResult, setLoanResult] = useState<LoanResult | null>(null);\n  \n  const { register, handleSubmit, setValue, watch } = useForm<LoanForm>({\n    defaultValues: {\n      loanAmount: 8000000,\n      downPayment: 2000000,\n      loanTerm: 30,\n      interestRate: 2.1\n    }\n  });\n\n  const calculateLoan = (data: LoanForm) => {\n    const { loanAmount, downPayment, loanTerm, interestRate } = data;\n    \n    // Calculate principal amount (loan amount - down payment)\n    const principal = loanAmount - downPayment;\n    \n    // Convert annual rate to monthly rate\n    const monthlyRate = (interestRate / 100) / 12;\n    \n    // Convert years to months\n    const numberOfPayments = loanTerm * 12;\n    \n    // Calculate monthly payment using loan formula\n    let monthlyPayment = 0;\n    if (monthlyRate > 0) {\n      monthlyPayment = principal * (monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / \n                     (Math.pow(1 + monthlyRate, numberOfPayments) - 1);\n    } else {\n      monthlyPayment = principal / numberOfPayments;\n    }\n    \n    // Calculate first payment breakdown\n    const interestPayment = principal * monthlyRate;\n    const principalPayment = monthlyPayment - interestPayment;\n    \n    // Assume monthly income for ratio calculations (demo values)\n    const monthlyIncome = 90000; // This should come from actual income data\n    \n    // Calculate ratios\n    const mortgageRatio = (monthlyPayment / monthlyIncome) * 100;\n    const debtRatio = mortgageRatio; // Simplified - should include other debts\n    \n    // Determine affordability\n    const isAffordable = mortgageRatio <= 30 && debtRatio <= 40;\n    \n    const result: LoanResult = {\n      monthlyPayment,\n      principalPayment,\n      interestPayment,\n      debtRatio,\n      mortgageRatio,\n      isAffordable\n    };\n    \n    setLoanResult(result);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('zh-TW', {\n      style: 'currency',\n      currency: 'TWD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-sm p-6\" data-testid=\"section-loan-assessment\">\n      <h3 className=\"text-xl font-semibold text-slate-800 mb-6\">貸款能力評估</h3>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Loan Calculator */}\n        <div>\n          <h4 className=\"text-lg font-medium text-slate-800 mb-4\">房貸試算</h4>\n          <form onSubmit={handleSubmit(calculateLoan)} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"loanAmount\">房屋總價</Label>\n              <Input\n                id=\"loanAmount\"\n                type=\"number\"\n                placeholder=\"8000000\"\n                {...register(\"loanAmount\", { valueAsNumber: true })}\n                data-testid=\"input-loan-amount\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"downPayment\">頭期款</Label>\n              <Input\n                id=\"downPayment\"\n                type=\"number\"\n                placeholder=\"2000000\"\n                {...register(\"downPayment\", { valueAsNumber: true })}\n                data-testid=\"input-down-payment\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"loanTerm\">貸款年限</Label>\n                <Select onValueChange={(value) => setValue(\"loanTerm\", parseInt(value))}>\n                  <SelectTrigger data-testid=\"select-loan-term\">\n                    <SelectValue placeholder=\"30年\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"20\">20年</SelectItem>\n                    <SelectItem value=\"25\">25年</SelectItem>\n                    <SelectItem value=\"30\">30年</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"interestRate\">利率 (%)</Label>\n                <Input\n                  id=\"interestRate\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"2.1\"\n                  {...register(\"interestRate\", { valueAsNumber: true })}\n                  data-testid=\"input-interest-rate\"\n                />\n              </div>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-primary text-white hover:bg-blue-700\"\n              data-testid=\"button-calculate-loan\"\n            >\n              計算貸款能力\n            </Button>\n          </form>\n        </div>\n\n        {/* Loan Assessment Results */}\n        <div>\n          <h4 className=\"text-lg font-medium text-slate-800 mb-4\">評估結果</h4>\n          {loanResult ? (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-slate-50 rounded-lg\" data-testid=\"result-monthly-payment\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-sm text-slate-600\">每月應繳金額</span>\n                  <span className=\"text-xl font-bold text-slate-800\">\n                    {formatCurrency(loanResult.monthlyPayment)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-sm text-slate-600\">\n                  <span>本金</span>\n                  <span>{formatCurrency(loanResult.principalPayment)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm text-slate-600\">\n                  <span>利息</span>\n                  <span>{formatCurrency(loanResult.interestPayment)}</span>\n                </div>\n              </div>\n\n              <div className=\"p-4 border border-slate-200 rounded-lg\" data-testid=\"result-financial-health\">\n                <h5 className=\"font-medium text-slate-800 mb-3\">財務健康度指標</h5>\n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>負債收入比</span>\n                      <span className={`font-medium ${loanResult.debtRatio <= 40 ? 'text-success' : 'text-warning'}`}>\n                        {loanResult.debtRatio.toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-slate-200 rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full ${loanResult.debtRatio <= 40 ? 'bg-success' : 'bg-warning'}`}\n                        style={{ width: `${Math.min(loanResult.debtRatio, 100)}%` }}\n                      ></div>\n                    </div>\n                    <p className=\"text-xs text-slate-500 mt-1\">健康範圍: &lt; 40%</p>\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between text-sm mb-1\">\n                      <span>房貸收入比</span>\n                      <span className={`font-medium ${loanResult.mortgageRatio <= 30 ? 'text-success' : 'text-warning'}`}>\n                        {loanResult.mortgageRatio.toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-slate-200 rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full ${loanResult.mortgageRatio <= 30 ? 'bg-success' : 'bg-warning'}`}\n                        style={{ width: `${Math.min(loanResult.mortgageRatio, 100)}%` }}\n                      ></div>\n                    </div>\n                    <p className=\"text-xs text-slate-500 mt-1\">建議範圍: &lt; 30%</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className={`p-4 border rounded-lg ${\n                loanResult.isAffordable \n                  ? 'bg-green-50 border-green-200' \n                  : 'bg-red-50 border-red-200'\n              }`} data-testid=\"result-affordability\">\n                <div className=\"flex items-center\">\n                  <i className={`${\n                    loanResult.isAffordable ? 'fas fa-check-circle text-success' : 'fas fa-exclamation-circle text-warning'\n                  } mr-2`}></i>\n                  <span className={`text-sm font-medium ${\n                    loanResult.isAffordable ? 'text-success' : 'text-warning'\n                  }`}>\n                    {loanResult.isAffordable ? '符合貸款條件' : '貸款風險偏高'}\n                  </span>\n                </div>\n                <p className={`text-xs mt-1 ${\n                  loanResult.isAffordable ? 'text-green-600' : 'text-red-600'\n                }`}>\n                  {loanResult.isAffordable \n                    ? '根據您的收入狀況，可負擔此房貸金額'\n                    : '建議重新評估貸款金額或增加頭期款'\n                  }\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center text-slate-500 py-8\">\n              <i className=\"fas fa-calculator text-4xl mb-4\"></i>\n              <p>請填寫左側表單進行貸款評估</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9967},"client/src/components/financial/overview-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface OverviewCardsProps {\n  timeRange: string;\n}\n\ninterface SummaryData {\n  totalIncome: number;\n  totalExpenses: number;\n  netIncome: number;\n  savingsRate: number;\n}\n\nexport default function OverviewCards({ timeRange }: OverviewCardsProps) {\n  const { data: summary } = useQuery<SummaryData>({\n    queryKey: [\"/api/analysis/summary\"],\n    staleTime: 30000,\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('zh-TW', {\n      style: 'currency',\n      currency: 'TWD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const cards = [\n    {\n      title: \"總收入\",\n      value: summary?.totalIncome || 0,\n      change: \"+12.5% 比上月\",\n      changeType: \"positive\",\n      icon: \"fas fa-arrow-trend-up\",\n      bgColor: \"bg-green-100\",\n      iconColor: \"text-success\",\n      testId: \"card-total-income\"\n    },\n    {\n      title: \"總支出\",\n      value: summary?.totalExpenses || 0,\n      change: \"+3.2% 比上月\",\n      changeType: \"negative\",\n      icon: \"fas fa-arrow-trend-down\",\n      bgColor: \"bg-red-100\",\n      iconColor: \"text-warning\",\n      testId: \"card-total-expenses\"\n    },\n    {\n      title: \"淨收入\",\n      value: summary?.netIncome || 0,\n      change: \"+18.7% 比上月\",\n      changeType: \"positive\",\n      icon: \"fas fa-wallet\",\n      bgColor: \"bg-blue-100\",\n      iconColor: \"text-primary\",\n      testId: \"card-net-income\"\n    },\n    {\n      title: \"儲蓄率\",\n      value: summary?.savingsRate || 0,\n      change: \"目標: 30%\",\n      changeType: \"positive\",\n      icon: \"fas fa-piggy-bank\",\n      bgColor: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      testId: \"card-savings-rate\",\n      isPercentage: true\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {cards.map((card) => (\n        <div key={card.testId} className=\"bg-white rounded-xl shadow-sm p-6\" data-testid={card.testId}>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-slate-600 mb-1\">{card.title}</p>\n              <p className=\"text-2xl font-bold text-slate-800\" data-testid={`text-${card.testId}-value`}>\n                {card.isPercentage \n                  ? `${card.value.toFixed(1)}%`\n                  : formatCurrency(card.value)\n                }\n              </p>\n              <p className={`text-xs mt-1 ${\n                card.changeType === \"positive\" ? \"text-success\" : \"text-warning\"\n              }`}>\n                <i className=\"fas fa-arrow-up mr-1\"></i>\n                {card.change}\n              </p>\n            </div>\n            <div className={`p-3 ${card.bgColor} rounded-full`}>\n              <i className={`${card.icon} ${card.iconColor}`}></i>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2933},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  const menuItems = [\n    { href: \"/\", icon: \"fas fa-tachometer-alt\", label: \"總覽儀表板\" },\n    { href: \"/income\", icon: \"fas fa-coins\", label: \"收入管理\" },\n    { href: \"/expenses\", icon: \"fas fa-credit-card\", label: \"支出管理\" },\n    { href: \"/analysis\", icon: \"fas fa-chart-bar\", label: \"財務分析\" },\n    { href: \"/loan\", icon: \"fas fa-home\", label: \"貸款評估\" },\n  ];\n\n  return (\n    <aside className=\"w-64 bg-white shadow-lg\">\n      <div className=\"p-6 border-b border-slate-200\">\n        <h1 className=\"text-xl font-bold text-slate-800\">\n          <i className=\"fas fa-chart-line text-primary mr-2\"></i>\n          理財規劃系統\n        </h1>\n      </div>\n      <nav className=\"p-4\">\n        <ul className=\"space-y-2\">\n          {menuItems.map((item) => (\n            <li key={item.href}>\n              <Link \n                href={item.href}\n                className={`flex items-center p-3 rounded-lg ${\n                  location === item.href\n                    ? \"bg-primary text-white\"\n                    : \"text-slate-600 hover:bg-slate-100\"\n                }`}\n                data-testid={`link-${item.label}`}\n              >\n                <i className={`${item.icon} mr-3`}></i>\n                {item.label}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":1475},"client/src/components/modals/expense-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertExpenseRecordSchema } from \"@shared/schema\";\nimport type { InsertExpenseRecord } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface ExpenseModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport default function ExpenseModal({ open, onClose }: ExpenseModalProps) {\n  const queryClient = useQueryClient();\n  \n  const { register, handleSubmit, reset, setValue, formState: { errors } } = useForm<InsertExpenseRecord>({\n    resolver: zodResolver(insertExpenseRecordSchema),\n    defaultValues: {\n      category: \"living\",\n      amount: \"0\",\n      date: new Date().toISOString().split('T')[0],\n      description: \"\",\n      notes: \"\"\n    }\n  });\n\n  const createExpenseMutation = useMutation({\n    mutationFn: (data: InsertExpenseRecord) => \n      apiRequest(\"POST\", \"/api/expenses\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/expenses\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analysis/summary\"] });\n      reset();\n      onClose();\n    },\n  });\n\n  const onSubmit = (data: InsertExpenseRecord) => {\n    createExpenseMutation.mutate(data);\n  };\n\n  const expenseCategories = [\n    { value: \"living\", label: \"生活費用\" },\n    { value: \"loan\", label: \"貸款支出\" },\n    { value: \"insurance\", label: \"保險費用\" },\n    { value: \"investment\", label: \"投資支出\" },\n    { value: \"entertainment\", label: \"娛樂支出\" },\n    { value: \"other\", label: \"其他支出\" }\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-expense\">\n        <DialogHeader>\n          <DialogTitle>新增支出記錄</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"category\">支出類別</Label>\n              <Select onValueChange={(value) => setValue(\"category\", value)} defaultValue=\"living\">\n                <SelectTrigger data-testid=\"select-expense-category\">\n                  <SelectValue placeholder=\"選擇支出類別\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {expenseCategories.map((category) => (\n                    <SelectItem key={category.value} value={category.value}>\n                      {category.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.category && <p className=\"text-sm text-warning mt-1\">{errors.category.message}</p>}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"amount\">金額</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                placeholder=\"輸入金額\"\n                {...register(\"amount\")}\n                data-testid=\"input-expense-amount\"\n              />\n              {errors.amount && <p className=\"text-sm text-warning mt-1\">{errors.amount.message}</p>}\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"date\">日期</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                {...register(\"date\")}\n                data-testid=\"input-expense-date\"\n              />\n              {errors.date && <p className=\"text-sm text-warning mt-1\">{errors.date.message}</p>}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"description\">描述</Label>\n              <Input\n                id=\"description\"\n                placeholder=\"支出描述\"\n                {...register(\"description\")}\n                data-testid=\"input-expense-description\"\n              />\n              {errors.description && <p className=\"text-sm text-warning mt-1\">{errors.description.message}</p>}\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">備註</Label>\n            <Textarea\n              id=\"notes\"\n              rows={3}\n              placeholder=\"輸入備註...\"\n              {...register(\"notes\")}\n              data-testid=\"textarea-expense-notes\"\n            />\n            {errors.notes && <p className=\"text-sm text-warning mt-1\">{errors.notes.message}</p>}\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4 border-t border-slate-200\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose}\n              data-testid=\"button-cancel-expense\"\n            >\n              取消\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"bg-warning text-white hover:bg-red-600\"\n              disabled={createExpenseMutation.isPending}\n              data-testid=\"button-save-expense\"\n            >\n              {createExpenseMutation.isPending ? \"儲存中...\" : \"儲存\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5736},"client/src/components/modals/income-modal.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertIncomeRecordSchema } from \"@shared/schema\";\nimport type { InsertIncomeRecord } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface IncomeModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport default function IncomeModal({ open, onClose }: IncomeModalProps) {\n  const queryClient = useQueryClient();\n  \n  const { register, handleSubmit, reset, setValue, watch, formState: { errors } } = useForm<InsertIncomeRecord>({\n    resolver: zodResolver(insertIncomeRecordSchema),\n    defaultValues: {\n      type: \"salary\",\n      category: \"base\",\n      amount: \"0\",\n      date: new Date().toISOString().split('T')[0],\n      notes: \"\"\n    }\n  });\n\n  const selectedType = watch(\"type\");\n\n  const createIncomeMutation = useMutation({\n    mutationFn: (data: InsertIncomeRecord) => \n      apiRequest(\"POST\", \"/api/income\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/income\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analysis/summary\"] });\n      reset();\n      onClose();\n    },\n  });\n\n  const onSubmit = (data: InsertIncomeRecord) => {\n    createIncomeMutation.mutate(data);\n  };\n\n  const getIncomeCategories = (type: string) => {\n    const categories: { [key: string]: { value: string; label: string }[] } = {\n      salary: [\n        { value: \"base\", label: \"基本月薪\" },\n        { value: \"bonus\", label: \"年終獎金\" },\n        { value: \"overtime\", label: \"加班費\" },\n        { value: \"allowance\", label: \"津貼補助\" },\n        { value: \"other\", label: \"其他薪資\" }\n      ],\n      investment: [\n        { value: \"dividend\", label: \"股票股利\" },\n        { value: \"interest\", label: \"債券利息\" },\n        { value: \"fund\", label: \"基金收益\" },\n        { value: \"rent\", label: \"房租收入\" },\n        { value: \"other\", label: \"其他投資\" }\n      ],\n      business: [\n        { value: \"revenue\", label: \"營業收入\" },\n        { value: \"side\", label: \"副業收入\" },\n        { value: \"consulting\", label: \"顧問費用\" },\n        { value: \"royalty\", label: \"版權收入\" },\n        { value: \"other\", label: \"其他創業\" }\n      ]\n    };\n    return categories[type] || [];\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-income\">\n        <DialogHeader>\n          <DialogTitle>新增收入記錄</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"type\">收入類型</Label>\n              <Select onValueChange={(value) => setValue(\"type\", value as any)} defaultValue=\"salary\">\n                <SelectTrigger data-testid=\"select-income-type\">\n                  <SelectValue placeholder=\"選擇收入類型\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"salary\">薪資收入</SelectItem>\n                  <SelectItem value=\"investment\">投資收入</SelectItem>\n                  <SelectItem value=\"business\">創業收入</SelectItem>\n                </SelectContent>\n              </Select>\n              {errors.type && <p className=\"text-sm text-warning mt-1\">{errors.type.message}</p>}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"category\">收入項目</Label>\n              <Select onValueChange={(value) => setValue(\"category\", value)}>\n                <SelectTrigger data-testid=\"select-income-category\">\n                  <SelectValue placeholder=\"選擇收入項目\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {getIncomeCategories(selectedType).map((category) => (\n                    <SelectItem key={category.value} value={category.value}>\n                      {category.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.category && <p className=\"text-sm text-warning mt-1\">{errors.category.message}</p>}\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <Label htmlFor=\"amount\">金額</Label>\n              <Input\n                id=\"amount\"\n                type=\"number\"\n                placeholder=\"輸入金額\"\n                {...register(\"amount\")}\n                data-testid=\"input-income-amount\"\n              />\n              {errors.amount && <p className=\"text-sm text-warning mt-1\">{errors.amount.message}</p>}\n            </div>\n            \n            <div>\n              <Label htmlFor=\"date\">日期</Label>\n              <Input\n                id=\"date\"\n                type=\"date\"\n                {...register(\"date\")}\n                data-testid=\"input-income-date\"\n              />\n              {errors.date && <p className=\"text-sm text-warning mt-1\">{errors.date.message}</p>}\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">備註</Label>\n            <Textarea\n              id=\"notes\"\n              rows={3}\n              placeholder=\"輸入備註...\"\n              {...register(\"notes\")}\n              data-testid=\"textarea-income-notes\"\n            />\n            {errors.notes && <p className=\"text-sm text-warning mt-1\">{errors.notes.message}</p>}\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4 border-t border-slate-200\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose}\n              data-testid=\"button-cancel-income\"\n            >\n              取消\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"bg-primary text-white hover:bg-blue-700\"\n              disabled={createIncomeMutation.isPending}\n              data-testid=\"button-save-income\"\n            >\n              {createIncomeMutation.isPending ? \"儲存中...\" : \"儲存\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6797},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}